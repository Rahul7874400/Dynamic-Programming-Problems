#include <bits/stdc++.h>
using namespace std;


class Solution
{
    public:
    long long minimumNumberOfCoins(int coins[],int numberOfCoins,int value)
    {
        //using recursion
        /*
        if(value==0)
        return 0;
        
        
        int res=INT_MAX;
        for(int i=0;i<numberOfCoins;i++)
        {
            if(value>=coins[i])
            {
                int sub_res=minimumNumberOfCoins(coins,numberOfCoins,value-coins[i]);
                if(sub_res!=-1)
                res=min(res,sub_res+1);
            }
        }
        if(res!=INT_MAX)
        return res;
        else
        return -1;
        */
       
       //using dynamic programming.
        int dp[value+1];
        dp[0]=0;
        
        for(int i=1;i<=value;i++)
        {
            dp[i]=INT_MAX;
            for(int j=0;j<numberOfCoins;j++)
            {
                if(i>=coins[j])
                {
                    int sub_res=dp[i-coins[j]];
                    if(sub_res!=INT_MAX)
                    dp[i]=min(dp[i],sub_res+1);
                }
            }
        }
        if(dp[value]==INT_MAX)
        return -1;
        else
        return dp[value];
    }
};



int main() {
	
	//taking total count of testcases
	int testcases;
	cin>>testcases;
	while(testcases--)
	{
	    //taking value
	    int value;
	    cin>>value;
	    
	    //taking number of coins
	    int numberOfCoins;
	    cin>>numberOfCoins;
	    int coins[numberOfCoins];
	    
	    //taking value of each coin
	    for(int i=0;i<numberOfCoins;i++)
	    cin>>coins[i];
	    Solution obj;
	    //calling function minimumNumberOfCoins()
	    int answer=obj.minimumNumberOfCoins(coins,numberOfCoins,value);
	    
	    //printing "Not Possible" if answer is -1
	    //else printing answer
	    if(answer==-1)
	    cout<<"Not Possible"<<endl;
	    else
	    cout<<answer<<endl;
	    
	}
	return 0;
}
