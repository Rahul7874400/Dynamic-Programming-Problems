
#include <bits/stdc++.h>
using namespace std;


class Solution{
    private:
    int solve(string str,string S)
    {
        int n = str.length();
        int m = S.length();
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++)
        dp[i][0] = 0;
        
        for(int i=0;i<=m;i++)
        dp[0][i] = 0;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(str[i-1]==S[j-1])
                dp[i][j] = dp[i-1][j-1]+1;
                
                else
                dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        
        return dp[n][m];
    }
  public:
    int countMin(string str){
        string S = str;
        int i=0;
        int j = S.length()-1;
        while(i<=j)
        {
            swap(S[i],S[j]);
            i++;
            j--;
        }
        
        // subtract the longest palindrom from total length of string.
        
        return str.length()-solve(str,S);
    }
};

int main(){
    int t;
    cin >> t;
    while(t--){
        string str;
        cin >> str;
        Solution ob;
        cout << ob.countMin(str) << endl;
    }
return 0;
}
