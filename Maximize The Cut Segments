#include<bits/stdc++.h>
using namespace std;



class Solution
{
    public:
    int maximizeTheCuts(int n, int x, int y, int z)
    {   
        //using recursion
        if(n==0)
        return 0;
        
        if(n<0)
        return -1;
        
        
        
        int res=max(maximizeTheCuts(n-x,x,y,z),
                    maximizeTheCuts(n-y,x,y,z),
                    maximizeTheCuts(n-z,x,y,z));
                    
        if(res!=-1)
        return res+1;
        
        else
        return res;
        
        
        // using dynamic pogramming
        int dp[n+1];
        dp[0]=0;
        
        for(int i=1;i<=n;i++)
        {
            dp[i]=-1;
            if(i-x>=0)
            dp[i]=max(dp[i],dp[i-x]);
            if(i-y>=0)
            dp[i]=max(dp[i],dp[i-y]);
            if(i-z>=0)
            dp[i]=max(dp[i],dp[i-z]);
            if(dp[i]!=-1)
            dp[i]=dp[i]+1;
        }
        return max(dp[n],0);
    }
};

int main() {
    
    //taking testcases
    int t;
    cin >> t;
    while(t--)
    {
        //taking length of line segment
        int n;
        cin >> n;
        
        //taking types of segments
        int x,y,z;
        cin>>x>>y>>z;
        Solution obj;
        //calling function maximizeTheCuts()
        cout<<obj.maximizeTheCuts(n,x,y,z)<<endl;

    }

	return 0;
}
