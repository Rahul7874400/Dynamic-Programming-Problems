#include <bits/stdc++.h>
using namespace std;

class Solution{

  public:
	int minDifference(int arr[], int n)  { 
	    int sum =arr[0];
	    
	    for(int i=1;i<n;i++)
	    sum = sum+arr[i];
	    
	    int dp[n+1][sum+1];
	    
	    for(int i=0;i<=sum;i++)
	    dp[0][i] = 0;
	    
	    for(int i=0;i<=n;i++)
	    dp[i][0]=1;
	    
	    for(int i=1;i<=n;i++){
	        for(int j=1;j<=sum;j++){
	            if(j<arr[i-1])
	            dp[i][j] = dp[i-1][j];
	            else
	            dp[i][j] = dp[i-1][j]|| dp[i-1][j-arr[i-1]];
	        }
	        
	    }
      // Last row represent the all possible target sum from the subset of the given array. So from this row we can find the both subset and then find minimum 
      // sum subset.
	    int s1,s2;
	    int ans = INT_MAX;
	    for(int i=0;i<=sum/2;i++)
	    {
	        if(dp[n][i]==1)
	        {
	            s1 = i;
	            s2=sum-i;
	            ans = min(ans,abs(s2-s1));
	        }
	    }
	    
	    return ans;
	} 
};


int main() 
{
   
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;

        int a[n];
        for(int i = 0; i < n; i++)
        	cin >> a[i];

       

	    Solution ob;
	    cout << ob.minDifference(a, n) << "\n";
	     
    }
    return 0;
}
