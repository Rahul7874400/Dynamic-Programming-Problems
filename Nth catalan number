#include <boost/multiprecision/cpp_int.hpp>
using boost::multiprecision::cpp_int;  // https://www.geeksforgeeks.org/factorial-large-number-using-boost-multiprecision-library/
using namespace std;



class Solution
{
    public:
    cpp_int findCatalan(int n) 
    {
        //using dynamic programming
        cpp_int dp[n+1];
        dp[0]=1;
        
        for(int i=1;i<=n;i++)
        {
            dp[i]=0;
            for(int j=0;j<i;j++)
            {
                dp[i]=dp[i]+dp[j]*dp[i-j-1];
            }
        }
        return dp[n];
        
    }
};


int main() 
{
    //taking count of testcases
	int t;
	cin>>t;
	while(t--) {
	    
	    //taking nth number
	    int n;
	    cin>>n;
	    Solution obj;
	    //calling function findCatalan function
	    cout<< obj.findCatalan(n) <<"\n";    
	}
	return 0;
}
