
#include <bits/stdc++.h>
using namespace std;

class Solution{
    private:
    int fun(int arr[],int n,int sum)
    {
        /*
        // using recursion
        if(sum==0)
        return 1;
        
        if(n==0)
        return 0;
        
        return fun(arr,n-1,sum)||fun(arr,n-1,sum-arr[n-1]);
        */
        
        //using dynamic programming
        int dp[n+1][sum+1];
        
        for(int i=0;i<=sum;i++)
        dp[0][i] = 0;
        
        for(int i=0;i<=n;i++)
        dp[i][0] = 1;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){
                if(sum<arr[i-1])
                dp[i][j] = dp[i-1][j];
                
                else
                dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
            }
        }
        
        return dp[n][sum];
    }
public:
    int equalPartition(int N, int arr[])
    {
        int sum = arr[0];
        
        for(int i=1;i<N;i++)
        sum = sum+arr[i];
        
        if(sum%2==0)
        return fun(arr,N,sum/2);
        else
        return 0;
    }
};


int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        if(ob.equalPartition(N, arr))
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
} 
